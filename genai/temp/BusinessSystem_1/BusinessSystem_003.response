{
    "models": [
        {
            "classname": "Customer",
            "code": "class Customer(Base):\n    \"\"\"description: Stores customer information including credit limits and balance.\"\"\"\n    __tablename__ = 'customer'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    balance = Column(Integer, default=0)\n    credit_limit = Column(Integer)",
            "description": "Stores customer information including credit limits and balance.",
            "name": "Customer"
        },
        {
            "classname": "Order",
            "code": "class Order(Base):\n    \"\"\"description: Contains order details and references the customer.\"\"\"\n    __tablename__ = 'order'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    customer_id = Column(Integer, ForeignKey('customer.id'))\n    amount_total = Column(Integer, default=0)\n    date_shipped = Column(Date)\n    notes = Column(String)\n\n    # ForeignKey Constraint\n    customer = relationship(\"Customer\", back_populates=\"orders\")",
            "description": "Contains order details and references the customer.",
            "name": "Order"
        },
        {
            "classname": "Item",
            "code": "class Item(Base):\n    \"\"\"description: Items included in orders, with amounts calculated from quantity and unit price.\"\"\"\n    __tablename__ = 'item'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    order_id = Column(Integer, ForeignKey('order.id'))\n    product_id = Column(Integer, ForeignKey('product.id'))\n    quantity = Column(Integer)\n    unit_price = Column(Integer)\n    amount = Column(Integer, default=0)\n\n    # ForeignKey Constraint\n    order = relationship(\"Order\", back_populates=\"items\")\n    product = relationship(\"Product\", back_populates=\"items\")",
            "description": "Items included in orders, with amounts calculated from quantity and unit price.",
            "name": "Item"
        },
        {
            "classname": "Product",
            "code": "class Product(Base):\n    \"\"\"description: List of products available for sale, with pricing details.\"\"\"\n    __tablename__ = 'product'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    unit_price = Column(Integer)\n\n    # Back reference\n    items = relationship(\"Item\", back_populates=\"product\")",
            "description": "List of products available for sale, with pricing details.",
            "name": "Product"
        }
    ],
    "rules": [
        {
            "name": "Customer Balance Constraint",
            "description": "Ensure that the customer's balance does not exceed the credit limit.",
            "use_case": "Validation of customer's financial state before processing orders.",
            "code": "Rule.constraint(validate=Customer, as_condition=lambda row: row.balance <= row.credit_limit, error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")"
        },
        {
            "name": "Customer Balance Sum",
            "description": "Customer balance is derived as the sum of order totals where not yet shipped.",
            "use_case": "Aggregate unpaid orders to track customer's current balance.",
            "code": "Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)"
        },
        {
            "name": "Order Amount Total Sum",
            "description": "The total order amount is derived as the sum of item amounts.",
            "use_case": "Calculate the total cost for an order based on its items.",
            "code": "Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)"
        },
        {
            "name": "Item Amount Formula",
            "description": "Calculate item amount as the product of quantity and unit price.",
            "use_case": "Compute the cost for an individual order item.",
            "code": "Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)"
        },
        {
            "name": "Item Unit Price Copy",
            "description": "Copy the unit price from the product to the item.",
            "use_case": "Maintain consistency in pricing between product catalog and order details.",
            "code": "Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)"
        }
    ],
    "test_data": "# Test data for Customer\ncustomer1 = Customer(id=1, name='John Doe', balance=100, credit_limit=500)\ncustomer2 = Customer(id=2, name='Jane Smith', balance=200, credit_limit=600)\ncustomer3 = Customer(id=3, name='Alice Johnson', balance=150, credit_limit=550)\ncustomer4 = Customer(id=4, name='Bob Brown', balance=50, credit_limit=300)\n\n# Test data for Product\nproduct1 = Product(id=1, name='Product A', unit_price=50)\nproduct2 = Product(id=2, name='Product B', unit_price=75)\nproduct3 = Product(id=3, name='Product C', unit_price=100)\nproduct4 = Product(id=4, name='Product D', unit_price=150)\n\n# Test data for Order\norder1 = Order(id=1, customer_id=1, amount_total=100, date_shipped=date(2023, 7, 24), notes='First order')\norder2 = Order(id=2, customer_id=2, amount_total=150, date_shipped=date(2023, 8, 15), notes='Second order')\norder3 = Order(id=3, customer_id=3, amount_total=225, date_shipped=None, notes='Third order pending')\norder4 = Order(id=4, customer_id=4, amount_total=50, date_shipped=date(2023, 9, 5), notes='Fourth order')\n\n# Test data for Item\nitem1 = Item(id=1, order_id=1, product_id=1, quantity=2, unit_price=50, amount=100)\nitem2 = Item(id=2, order_id=2, product_id=2, quantity=2, unit_price=75, amount=150)\nitem3 = Item(id=3, order_id=3, product_id=3, quantity=3, unit_price=100, amount=300)\nitem4 = Item(id=4, order_id=4, product_id=4, quantity=1, unit_price=150, amount=150)\n",
    "name": "BusinessSystem"
}